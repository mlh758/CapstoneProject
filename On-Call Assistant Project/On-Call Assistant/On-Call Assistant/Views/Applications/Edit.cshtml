@model On_Call_Assistant.Models.Application

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section styles {
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/colorPicker.css" rel="stylesheet" />
}

@section scripts {
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/jquery.colorPicker.js"></script>
}

<script>
    $(document).ready(function () {

        //If application has primary and/or secondary rotations, add the color pickers
        if("@Model.hasOnCall" != "False")
        {
            $("#primaryColorPickerDivForEdit").append('<input id="primaryColorPickerForEdit" type="text" name="primDisplayColor" value=' + '@Model.primDisplayColor' + ' />');
            $('#primaryColorPickerForEdit').colorPicker();
        }
        if("@Model.hasSecondary" != "False")
        {
            $("#secondaryColorPickerDivForEdit").append('<input id="secondaryColorPickerForEdit" type="text" name="secDisplayColor" value=' + '@Model.secDisplayColor' + ' />');
            $('#secondaryColorPickerForEdit').colorPicker();
        }
    });

</script>
<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Application</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.appName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.appName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.appName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.rotationLength, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rotationLength, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.rotationLength, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.hasOnCall, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.hasOnCall)
                    @Html.ValidationMessageFor(model => model.hasOnCall, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.hasSecondary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.hasSecondary)
                    @Html.ValidationMessageFor(model => model.hasSecondary, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.primDisplayColor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div id="primaryColorPickerDivForEdit" class="col-md-10">
                
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.secDisplayColor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div id="secondaryColorPickerDivForEdit" class="col-md-10">
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

